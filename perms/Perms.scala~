object Solution {
    import scala.collection.mutable._
    import scala.math._
    val modulo = (pow(10, 9) + 7).toInt
    
    def C(n:Int, k:Int, factorial:Int, resultsHM1:Array[Int], resultsHM2:Array[Int]):Int ={

        if(k==1){
		for(i <- 2 to n){
		      resultsHM2(i) = i*(i-1)/2
		}
		return n*(n-1)/2		
	}

	var n_1_k_1:Int = 0
	var results_i:Int = 0

	results_i = factorial/2
	resultsHM2(k) = results_i
	
	for(i <- k+1 to n){
	    n_1_k_1 = resultsHM1(i-1)
	    results_i = (results_i + (i-1)*n_1_k_1) % modulo
	    resultsHM2(i) = results_i
	}

	return results_i
    }
        
    def main(args: Array[String]) {

        val lines = io.Source.stdin.getLines
        val N = lines.next.toInt
            
        val results = new ArrayBuffer[BigInt]()
	var factorial:BigInt = 1

	var resultsHM1 = new Array[Int](N+1)
    	var resultsHM2 = new Array[Int](N+1)	      
	for(i <- 1 to N-1){
              factorial = factorial * i	
              results += C(N, i, (factorial%modulo).toInt, resultsHM1, resultsHM2)

	      var temp = resultsHM1
	      resultsHM1 = resultsHM2
	      resultsHM2 = temp
        }    
            
        println(results.map(_ % modulo).mkString(" "))
    }
}